<% include ./firebase  %>
<script src="//connect.facebook.net/en_US/sdk.js"></script>
<script>
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '151878745429679',
      cookie     : true,
      xfbml      : true,
      version    : 'v2.9'
    });
      
    FB.AppEvents.logPageView();   
  };
  FB.Event.subscribe('auth.authResponseChange', checkLoginState);
  (function(d, s, id){
  	var js, fjs = d.getElementsByTagName(s)[0];
  	if (d.getElementById(id)) {return;}
  	js = d.createElement(s); js.id = id;
  	js.src = "//connect.facebook.com/en_US/sdk.js";
  	fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));
  
  socVar = FB;
  
  document.getElementById('fb_button').addEventListener('click', function() {
    FB.login(checkLoginState, {scope: 'email,public_profile', return_scopes: true});
  }, false);
  
  
  function checkLoginState(event) {
    if (event.authResponse) {
        var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {
        unsubscribe();
        if (!isUserEqual(event.authResponse, firebaseUser)) {
          var credential = firebase.auth.FacebookAuthProvider.credential(
              event.authResponse.accessToken);
          if(!firebase.auth().currentUser){
              firebase.auth().signInWithCredential(credential).then((user)=>{
                console.log(user);
              }).catch(function(error) {
                var errorCode = error.code;
                var errorMessage = error.message;
                var email = error.email;
                var credential = error.credential;
              });
            }
            else{
              res.redirect("/");
            }
        } else {
          res.redirect("/");
        }
      });
    }   else {
      firebase.auth().signOut();
    }
  }

  function isUserEqual(facebookAuthResponse, firebaseUser) {
    if (firebaseUser) {
      var providerData = firebaseUser.providerData;
      for (var i = 0; i < providerData.length; i++) {
        if (providerData[i].providerId === firebase.auth.FacebookAuthProvider.PROVIDER_ID &&
            providerData[i].uid === facebookAuthResponse.userID) {
          return true;
        }
      }
    }
    return false;
  }
</script>